// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  plans     Plan[]
  createdAt DateTime @default(now())
  stripeCustomerId String?
  subscriptionPlan Subscription? 
  generationCount  Int     @default(0)
  generationLimit  Int     @default(10)
  lastReset        DateTime @default(now())
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  plan          SubsriptionType @default(free)    // "free" | "pro" | "enterprise"
  status        String   // "active", "canceled", "expired"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  stripeSubscriptionId String? // optional if using Stripe
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



model Plan {
  id             String   @id @default(uuid())
  platform       String
  contentPillars String[] // maps to frontend string[]
  frequency      Int
  tone           String
  goal           String?
  posts          Post[]   
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Post {
  id          String   @id @default(uuid())
  date        DateTime 
  title       String
  description String
  type        String
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id],onDelete: Cascade)
}

enum SubsriptionType {
  free
  pro
  enterprise
}